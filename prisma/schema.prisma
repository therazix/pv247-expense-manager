// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                        String  @id @default(uuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? // @db.Text
  access_token              String? // @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? // @db.Text
  session_state             String?
  refresh_token_expires_in  Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String     @id @default(uuid())
  sessionToken  String     @unique
  userId        String
  expires       DateTime
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  financialAccounts  FinancialAccount[]
  categories         Category[]
  accounts           Account[]
  sessions           Session[]
}

model Category {
  id            String         @id @default(uuid())
  name          String
  color         String?
  icon          String?
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  transactions  Transaction[]
}

model FinancialAccount {
  id            String         @id @default(uuid())
  name          String
  description   String?
  balance       Float          @default(0)
  currency      String
  createdAt     DateTime       @default(now())
  transactions  Transaction[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String
}

model Transaction {
  id                  String            @id @default(uuid())
  name                String?
  description         String?
  amount              Float             @default(0)
  datetime            DateTime          @default(now())
  financialAccount    FinancialAccount  @relation(fields: [financialAccountId], references: [id], onDelete: Cascade)
  financialAccountId  String
  category            Category?         @relation(fields: [categoryId], references: [id])
  categoryId          String?
}
